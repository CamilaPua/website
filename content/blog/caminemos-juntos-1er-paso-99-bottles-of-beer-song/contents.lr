title: Caminemos Juntos: 1er paso "99 Bottles of Beer song"
---
author: Andres Perez
---
body:

Esta es la continuación del articulo [Primeros pasos en Python](https://pybaq.co/blog/primeros-pasos-en-python/). 



Yo sé que somos muchos los que estamos muy interesados en programar. Pero es posible que también hagamos parte de aquellos a los que nos da una pereza inconcebible tener que ver una tonelada de teoría antes de ir a la practica. Y en ninguna manera condono la apatía a la teoría, pero a veces toca ensuciarse las manos un poco antes de descubrir un nuevo hobby. Esta serie de artículos van un poco en el espíritu del libro [Dive Into Python 3](https://diveintopython3.net/); entonces puede contener cosas que no conozcas, pero que pretende inspirarte a investigar.

### El Problema del Primer Paso

Bien , empecemos declarando el problema a resolver; lo podemos encontrar en este link ([[PROJECT\] 99 Bottles of Beer On the Wall Lyrics : beginnerprojects (reddit.com)](https://www.reddit.com/r/beginnerprojects/comments/19kxre/project_99_bottles_of_beer_on_the_wall_lyrics/)). En español quedaría así:

> #### Objetivo
>
> Crea un programa que imprime cada linea de la canción "99 Bottles of Beer on the Wall". Esto debería ser un programa sencillo, entonces, para hacerlo un poco mas dificil, aquí siguen algunas reglas a seguir:
>
> ##### Reglas
>
> 1. Si vas a usar una lista de todos los números, no los escribas manualmente todos. En cambio, usa una función estándar de Python.
> 2. Aparte de la frase "take one down", no tienes permitido escribir ningun numero/nombre de numero directo en la letra.
> 3. Recuerda, cuando llegues a 1 botella, la palabra "bottles" se vuelve singulas.
> 4. Pon una linea en blanco entre cada verso de la canción.

### Analisis y Programación

Vamos entonces a ver donde encontramos la letra completa de la canción y la analizamos:

- [99 BOTTLES OF BEER ON THE WALL - Lyrics - International Lyrics Playground](https://lyricsplayground.com/alpha/songs/numbers/99bottlesofbeeronthewall.html)

En definitiva no la voy a escribir entera aquí porque no tiene sentido desperdiciar ese espacio cuando puedes abrirla en otra pestaña ; ); pero si vamos a escribir 3 estrofas:

> One-hundred bottles of beer on the wall, 
> One-hundred bottles of beer!
> Take one down,
> Pass it around,
> Ninety-nine bottles of beer on the wall!
>
> Ninety-nine bottles of beer on the wall,
> Ninety-nine bottles of beer!
> Take one down,
> Pass it around,
> Ninety-eight bottles of beer on the wall!
>
> ...
>
> <iframe src="https://vlipsy.com/embed/gyck95iN" width="640" height="360" frameborder="0"></iframe>
>
> ...
>
> One bottle of beer on the wall,
> One bottle of beer!
> Take it down,
> Pass it around,
> No more bottles of beer on the wall!

#### Primero

Veamos que se repite y reescribamos la canción, lo que se repite lo pongo entre corchetes "[]" y lo que varía en "{}":

> {Numero de botellas}[ bottles of beer on the wall,]
> {Numero de botellas}[ bottles of beer!]
> [Take one down,
> Pass it around,]
> {Numero de botellas-1}[ bottles of beer on the wall!]

Y todo estaría perfecto si no fuera porque la ultima estrofa es diferente, por lo tanto...

#### Segundo

Una excepción nos dañaría el caminado, denoto la condicional con dobles corchetes "{{}}":

> {{Cuando quede una botella}}
>
> {1}[bottle of beer on the wall,]
> {1}[bottle of beer!]
> [Take it down,
> Pass it around,
> No more bottles of beer on the wall!]

Con esto tenemos la estructura de lo que queremos lograr, ahora necesitamos conocer que herramientas tenemos...

#### Tercero

Las herramientas serían varias, lo que creo necesitar es lo siguiente:

- Una manera de iterar (recorrer los numeros desde el 100 hasta el 1).
  La herramienta `for` nos ayuda a recorrer elementos iterables, pero no necesariamente esos son números. [Docs](https://www.w3schools.com/python/python_for_loops.asp)
- Podemos generar un iterable de numeros usando la herramienta `range`.[Docs](https://www.w3schools.com/python/ref_func_range.asp)
- También necesitamos algún tipo de condicional y la herramienta `if` será la opción escogida. [Docs](https://www.w3schools.com/python/python_conditions.asp)

Procedamos entonces a construir con estas herramientas el esqueleto de nuestro programa.

```python
for x in range(100,-1,-1):
    if x==1:
        print('Lo que va cuando sea una botella')
    else:
        print('Lo que va cuando son varias botellas')
```

Ahora necesitamos resolver lo del texto, básteme decir que existe algo en python llamado f-string, [lee al respecto aquí](https://realpython.com/python-f-strings/). Creo 2 f-trings; una por cada condición:

```python
for x in range(100,0,-1):
    bottle_num=x
    if x==1:
        bottle_sings=(
        f"{bottle_num} bottle of beer on the wall,\n"
        f"{bottle_num} bottle of beer! \n"
        f"Take it down,\nPass it around,\nNo more bottles of beer on the wall!\n"
        )
        print(bottle_sings)
    else:
        bottles_sing=(
        f"{bottle_num} bottles of beer on the wall,\n"
        f"{bottle_num} bottles of beer!\n"
        f"Take it down,\nPass it around,\nNo more bottles of beer on the wall!\n"
        f"{bottle_num-1} bottles of beer on the wall!\n"
        )
        print(bottles_sing)
```

Aunque todo parece resuelto, puede refinarse para escribir descripciones de numeros. En Python tenemos un gestor de librerias llamada pip, con el podemos instalar librerías adicionales de un repositorio central llamado PyPI. Allí encontré algunas librerías que podrían ser utiles para imprimir texto en vez de numeros.

- [inflect · PyPI](https://pypi.org/project/inflect/) (muy complicada).
- [num2words · PyPI](https://pypi.org/project/num2words/) (me enamoró con el manejo de múltiples idiomas).
- [Convert Numbers to Words (Python) / Wiki / Home (sourceforge.net)](https://sourceforge.net/p/pynum2word/wiki/Home/) (técnicamente funciona, pero no me dice nada de como hacerlo).

Tras escoger num2words e instalarlo en mi PC, puedo modificar el código a lo siguiente:

```python
from num2words import num2words

for x in range(100,0,-1):
    bottle_num= num2words(x).capitalize()
    bottle_num_minusone= num2words(x-1).capitalize()
    if x==1:
        bottle_sings=(
        f"{bottle_num} bottle of beer on the wall,\n"
        f"{bottle_num} bottle of beer! \n"
        f"Take it down,\nPass it around,\nNo more bottles of beer on the wall!\n"
        )
        print(bottle_sings)
    else:
        bottles_sing=(
        f"{bottle_num} bottles of beer on the wall,\n"
        f"{bottle_num} bottles of beer!\n"
        f"Take it down,\nPass it around,\nNo more bottles of beer on the wall!\n"
        f"{bottle_num_minusone} bottles of beer on the wall!\n"
        )
        print(bottles_sing)
```

### ¿He comprendido algo maestro?

> El que quiera hacer la voluntad de Dios, conocerá si la doctrina es de Dios, o si yo hablo por mi propia cuenta
>
> Juan 7:17

Fuera de lo pretensioso de tratar de compararme con Jesucristo (aún si lo consideras una fábula), la idea es que solo tratando de replicar lo que aprendemos podemos interiorizar el tema aprendido. Entonces, evalúa tu conocimiento o entendimiento con las siguientes tareas:

- Traduce la canción a español
- Automatiza la canción de [Un elefante se balanceaba](https://arbolabc.com/canciones-infantiles/un-elefante-se-balanceaba) hasta 100 elefantes.
- Crea el "me quiere, no me quiere" de una flor de 18 petalos.

¿Tienes preguntas? Escríbeme en twitter @andresperezcera.
---
excerpt: Esta es una continuación del post "Primeros pasos en Python" y revisamos el primero de los ejercicios listados en el ese post.
---
pub_date: 2021-07-25
---
twitter_handle: andresperezcera
