title: Tutorial: Web Scraping y BeautifulSoup
---
author: javier-daza
---
body:

Siempre tuve en mis favoritos del navegador el tutorial de dataquest <span style="font-style: italic;font-size: 1.3rem;">www.dataquest.io/blog/web-scraping-beautifulsoup/</span>, pero desde hace un tiempo para acá, bajaron dicho artículo de su página web. El propósito de este artículo es rescatar ese contenido y, de paso, traducirlo al español.

¡Empecemos!

Para obtener datos para proyectos de ciencia de datos, a menudo confiará en bases de datos [SQL](https://es.wikipedia.org/wiki/SQL) y [NoSQL](https://es.wikipedia.org/wiki/NoSQL), [API](https://es.wikipedia.org/wiki/API) o conjuntos de datos en formato CSV listos para usar.

El problema es que no siempre puede encontrar un conjunto de datos sobre un tema específico, las bases de datos no se mantienen actualizadas y las API son costosas o tienen límites de uso.

Sin embargo, si los datos que está buscando están en una página web, entonces la solución a todos estos problemas es el **web scraping.**

En este tutorial, aprenderemos a raspar varias páginas web con Python usando [BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/) y [requests](https://docs.python-requests.org/en/latest/). Luego realizaremos un análisis simple usando [pandas](https://pandas.pydata.org/pandas-docs/stable/index.html) y [matplotlib](https://matplotlib.org/).

Para seguir este artículo necesitas tener:
- Una comprensión básica de HTML.
- Una buena comprensión de los conceptos básicos de Python.
- Una idea aproximada de qué es el web scraping.


## Scraping de datos para más de 2000 películas


Queremos analizar las distribuciones de las clasificaciones de películas de [IMDB](https://www.imdb.com/) y [Metacritic](https://www.metacritic.com/) para ver si encontramos algo interesante. Para hacer esto, primero recopilaremos datos de más de 2000 películas.

<span style="display: block;font-weight: 800;font-size: 1.7rem;font-style: italic;margin: 2rem 0;">
    Es fundamental identificar el objetivo de nuestro scraping desde el principio.
</span>

Escribir un script de scraping puede llevar mucho tiempo, especialmente si queremos scrapear más de una página web. Queremos evitar pasar horas escribiendo un script que extrae datos que en realidad no necesitaremos.

## Determinando qué páginas vamos a scrapear

Una vez que hemos establecido nuestro objetivo, debemos identificar un conjunto eficiente de páginas para scrapear.

Queremos encontrar una combinación de páginas que requiera un número relativamente pequeño de solicitudes. Una solicitud (*request* en inglés) es lo que sucede cada vez que accedemos a una página web. Nosotros 'solicitamos' el contenido de una página del servidor. Cuantas más solicitudes hagamos, más tiempo necesitará ejecutarse nuestro script y mayor será la sobrecarga en el servidor.

Una forma de obtener todos los datos que necesitamos es compilar una lista de nombres de películas y usarla para acceder a la página web de cada película en los sitios web de IMDB y Metacritic.


*----- GIF -------*

Como queremos obtener más de 2000 calificaciones tanto de IMDB como de Metacritic, tendremos que realizar al menos 4000 solicitudes. Si hacemos una solicitud por segundo, nuestro script necesitará un poco más de una hora para realizar 4000 solicitudes. Por ello, merece la pena intentar identificar formas más eficientes de obtener nuestros datos.

Si exploramos el sitio web de IMDB, podemos descubrir una forma de reducir a la mitad el número de solicitudes. Las puntuaciones de Metacritic se muestran en la página de películas de IMDB, por lo que podemos eliminar ambas clasificaciones con una sola solicitud:


*----- Imagen -------*

Si investigamos más a fondo el sitio de IMDB, podemos descubrir la página que se muestra a continuación. Contiene todos los datos que necesitamos para 50 películas. Dado nuestro objetivo, esto significa que solo tendremos que hacer unas 40 solicitudes, que es 100 veces menos que nuestra primera opción. Exploremos más esta última opción.


*----- Imagen -------*

- metapuntuación
- Búsqueda avanzada en la lupa. Nos lleva a:
    - https://www.imdb.com/find/?q=&ref_=nv_sr_sm
    - palabras clave https://www.imdb.com/search?ref_=fn_asr_to
    - Year https://www.imdb.com/search/title/#releasedate?ref_=kw_brw_4
    - Release date 2022-01-01  2022-12-31
        - ¿Cómo selecciono solo el año 2022 para que la URL quede así? --> https://www.imdb.com/search/title/?release_date=2022&count=250
    - Devuelve 50 de un solo
        - https://www.imdb.com/search/title/?release_date=2022-01-01,2022-12-31
            40 peticiones para hacer las 2000
        - 250 --> https://www.imdb.com/search/title/?release_date=2022-01-01,2022-12-31&count=250
            8 peticiones para hacer las 2000

            ** No todas tienen metascore


## Identificando la estructura de la URL


Nuestro desafío ahora es asegurarnos de que entendemos la lógica de la URL a medida que cambian las páginas que queremos scrapear. Si no podemos entender esta lógica lo suficiente como para poder implementarla en el código, llegaremos a un callejón sin salida.

Si accede a la página de búsqueda avanzada de IMDB, puede buscar películas por año:

*----- Imagen -------*

Busquemos por año 2017, clasifiquemos las películas en la primera página por número de votos y luego cambiemos a la página siguiente. Así, llegaremos a esta página web, que tiene esta URL:

*----- Imagen -------*

En la imagen de arriba, puedes ver que la URL tiene varios parámetros después del signo de interrogación:

- `release_date`: muestra solo las películas estrenadas en un año específico.
- `sort`: Ordena las películas en la página. sort=num_votes,desc se traduce en ordenar por número de votos en orden descendente.
- `page`: especifica el número de página.
- `ref_`: Nos lleva a la página siguiente o anterior. La referencia es la página en la que nos encontramos actualmente. `adv_nxt` y `adv_prv` son dos valores posibles. Se traducen para avanzar a la página siguiente y avanzar a la página anterior, respectivamente.


Si navega por esas páginas y observa la URL, notará que solo cambian los valores de los parámetros. Esto significa que podemos escribir un script para que coincida con la lógica de los cambios y hacer muchas menos solicitudes para escrapear nuestros datos.

Comencemos a escribir el script solicitando el contenido de esta única página web:

https://www.imdb.com/search/title?release_date=2017&sort=num_votes,desc&page=1

En el primer bloque de código vamos a:

- Instalar `requests`

```bash
pip install requests
```
- Importar la función `get()` desde el módulo de `requests`.
- Asignar la dirección de la página web a una variable llamada `url`.
- Solicitar al servidor el contenido de la página web utilizando `get()` y almacenar la respuesta del servidor en la variable `respuesta`.
- Imprima una pequeña parte del contenido de la `respuesta` accediendo a su atributo `.text` (`respuesta` ahora es un objeto `Response`).


```python
from requests import get

url = 'https://www.imdb.com/search/title/?release_date=2022&count=250'

respuesta = get(url)

if respuesta.status_code == 200:
    print(respuesta.text[:500])
```

La respuesta que se obtiene:

```html
<!DOCTYPE html>
<html
    xmlns:og="http://ogp.me/ns#"
    xmlns:fb="http://www.facebook.com/2008/fbml">
    <head>
         

        <meta charset="utf-8">




        <script type="text/javascript">var IMDbTimer={starttime: new Date().getTime(),pt:'java'};</script>

<script>
    if (typeof uet == 'function') {
      uet("bb", "LoadTitle", {wb: 1});
    }
</script>
  <script>(function(t){ (t.events = t.events || {})["csm_head_pre_title"] = new Date().getTime(); })(IMDbTimer);</script>
   
```

```bash
# comentarios
# TODO: Borrarlos o incorporarlos en el texto del artículo
- https://www.imdb.com/search/title/?release_date=2022-01-01,2022-12-31&count=250
- https://www.imdb.com/search/title/?release_date=2022-01-01,2022-12-31&count=250&start=251&ref_=adv_nxt
- https://www.imdb.com/search/title/?release_date=2022-01-01,2022-12-31&count=250&start=501&ref_=adv_nxt

Posibilidad para avanzar a la página previa
https://www.imdb.com/search/title/?release_date=2022-01-01,2022-12-31&count=250&start=251&ref_=adv_prv


Código para leer
https://www.imdb.com/search/title/?release_date=2022&count=250
```

## Comprendiendo la estructura HTML de una sola página

Como puede ver en la primera línea de `respuesta.text`, el servidor nos envió un documento HTML. Este documento describe la estructura general de esa página web, junto con su contenido específico (que es lo que hace que esa página en particular sea única).

Todas las páginas que queremos escrapear tienen la misma estructura general. Esto implica que también tienen la misma estructura general de HTML. Entonces, para escribir nuestro script, bastará con comprender la estructura HTML de una sola página. Para hacer eso, usaremos **las herramientas de desarrollo del navegador** (Developer Tools en inglés).

Si usa [Chrome](https://developer.chrome.com/devtools), haga clic con el botón derecho en un elemento de la página web que le interese y luego haga clic en *Inspeccionar*. Esto lo llevará directamente a la línea HTML que corresponde a ese elemento:

*----- Imagen -------*

También puede hacer esto con [Firefox](https://developer.mozilla.org/es/docs/Learn/Common_questions/Tools_and_setup/What_are_browser_developer_tools) y [Safari](https://developer.apple.com/safari/tools/) DevTools.

Tenga en cuenta que toda la información de cada película, incluido el póster, está contenida en una etiqueta `div`.


*----- Imagen -------*


Hay muchas líneas HTML anidadas dentro de cada etiqueta `div`. Puede explorarlos haciendo clic en esas pequeñas flechas grises a la izquierda de las líneas HTML correspondientes a cada `div`. Dentro de estas etiquetas anidadas encontraremos la información que necesitamos, como la calificación de una película.


*----- Imagen -------*

Se muestran 50 películas por página, por lo que debe haber un contenedor `div` para cada una. Extraigamos todos estos 50 contenedores mediante el análisis gramatical (*parsing* en inglés)del documento HTML de nuestra solicitud anterior.

## Usando BeautifulSoup para analizar el contenido HTML

Para analizar nuestro documento HTML y extraer los contenedores de 50 `div, usaremos un módulo de Python llamado [BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/), el módulo de web scraping más común para Python.

En el siguiente bloque de código vamos a:

- Instalar `BeautifulSoup`.
- Importar el creador de la clase `BeautifulSoup` del paquete `bs4`.
- *Parsear* `respuesta.text` al crear un objeto `BeautifulSoup` y asignar este objeto a `sopa_html`. El argumento `'html.parser'` indica que queremos realizar el análisis utilizando el analizador HTML integrado de Python.


```bash
pip install beautifulsoup4
```

```python
from bs4 import BeautifulSoup
sopa_html = BeautifulSoup(respuesta.text, 'html.parser')
type(sopa_html)
```

Esto imprime que nuestra sopa es un objeto de tipo:

```bash
<class 'bs4.BeautifulSoup'>
```

Antes de extraer los 50 contenedores `div`, debemos averiguar qué los distingue de otros elementos `div` en esa página. A menudo, la marca distintiva reside en el [atributo](https://www.w3schools.com/Tags/att_global_class.asp) de `class`. Si inspecciona las líneas HTML de los contenedores de interés, notará que el atributo de `class` tiene dos valores:

- `lister-item`
- `mode-advanced`.

Esta combinación es exclusiva de estos contenedores `div`. Podemos ver que es cierto haciendo una búsqueda rápida con `(Ctrl + F)`. Tenemos 50 contenedores de este tipo, por lo que esperamos ver solo 50 coincidencias:

*----- Imagen -------*

Ahora usemos el método `find_all()` para extraer todos los contenedores `div` que tienen un atributo de clase de tipo `lister-item mode-advanced`:

```python
contenedores_pelicula = sopa_html.find_all('div', class_ = 'lister-item mode-advanced')
print('Contenedores de la película:', type(contenedores_pelicula))
print('Longitud:', len(contenedores_pelicula))
```

Lo cual imprime

```bash
Contenedores de la película: <class 'bs4.element.ResultSet'>
Longitud: 250
```

`find_all` devolvió un objeto tipo `ResultSet` que contiene una lista de los 250 divs que nos interesan.

Ahora solo seleccionaremos el primer contenedor y, por turno, extraeremos cada elemento que nos interesa:
- El nombre de la pelicula
- El año del estreno de la película
- La calificación de IMDB
- El Metascore
- El número de votos

*----- Imagen -------*

## Extraer los datos de una sola película

Podemos acceder al primer contenedor, que contiene información sobre una sola película, usando la notación de lista en `contenedores_pelicula`.

```python
primera_pelicula = contenedores_pelicula[0]
print(primera_pelicula)
```

*----- HTML de respuesta -------*

Esto nos regresa un HTML bastante largo, por lo que para hayar cada elemento, necesitaremos usar el inspector de elementos del navegador.


### El nombre de la pelicula


```python
primer_nombre = first_movie.h3.a.text
print(primer_nombre)
```

```bash
'The Bear'
```

### El año del estreno de la película
Este dato está en una etiqueta `<span>` que se encuentra debajo de la etiqueta `<a>` que contiene el nombre


```python
primer_año = primera_pelicula.h3.find('span', class_ = 'lister-item-year text-muted unbold')
primer_año
```

```bash
<span class="lister-item-year text-muted unbold">(2022– )</span>
```


La limpieza la haremos después

### La calificación de IMDB
dasda

### El Metascore
asdasd

### El número de votos
asdad

## El script para una sola página.
Antes de reconstruir lo que hemos hecho hasta ahora, debemos asegurarnos de extraer los datos solo de los contenedores que tienen Metascore.

Necesitamos agregar una condición para omitir películas sin Metascore.


```bash
pip install pandas
```

```python
import pandas as pd
test_df = pd.DataFrame({'movie': names,
    'year': years,
    'imdb': imdb_ratings,
    'metascore': metascores,
    'votes': votes
})
print(test_df.info())
```


```bash
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 137 entries, 0 to 136
Data columns (total 5 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   movie      137 non-null    object 
 1   year       137 non-null    object 
 2   imdb       137 non-null    float64
 3   metascore  137 non-null    int64  
 4   votes      137 non-null    int64  
dtypes: float64(1), int64(2), object(2)
memory usage: 5.5+ KB
None
```

y ahora si reviso los primeros 5 elementos del DataFrame

```python
print(test_df.head(n=10))
```

```bash
                                  movie         year  imdb  metascore   votes
0                               Hablame   (I) (2022)   7.5         76   19721
1                               Babylon   (I) (2022)   7.2         60  138118
2                                     X  (II) (2022)   6.6         79  140214
3                      Un Vecino Gruñón       (2022)   7.5         51  116471
4            Avatar: El camino del agua       (2022)   7.6         67  448567
5                         Corner Office       (2022)   6.0         47    1766
6                               Top Gun       (2022)   8.3         78  621749
7                                Batman       (2022)   7.8         72  721057
8                            La ballena       (2022)   7.7         60  169943
9  Todo en todas partes al mismo tiempo       (2022)   7.8         81  471630
```





## El script de varias páginas.
Hacer el scraping para varias páginas es un poco más desafiante. Desarrollaremos nuestro script de una página haciendo tres cosas más:

1. Haciendo todas las peticiones que queramos desde dentro del bucle.
2. Controlar la velocidad del bucle para evitar bombardear el servidor con solicitudes.
3. Supervisión del bucle mientras se ejecuta.




### Cambiando los parámetros de las URLs
asdad

### Controlando la tasa de rastreo (crawl-rate)
asdas

### Monitoreando el bucle mientras continúa
asdad

### Juntando todo
asda

## Examinando los datos raspados
asdasda

## Limpiando los datos raspados
asdadsa

## Graficando y analizando las distribuciones
asdad

## Siguientes pasos
Hemos recorrido un largo camino desde solicitar el contenido de una sola página web hasta analizar las calificaciones de más de 2000 películas. Ahora debería saber cómo raspar muchas páginas web con la misma estructura HTML y URL.

Para aprovechar lo que hemos aprendido, estos son algunos de los siguientes pasos a considerar:

- Extraiga datos para diferentes intervalos de tiempo y página.
- Raspe datos adicionales sobre las películas.
- Encuentre un sitio web diferente para raspar algo que le interese. 
    - Por ejemplo, podría recopilar datos sobre [computadoras portátiles](https://listado.mercadolibre.com.co/port%C3%A1tiles#D[A:port%C3%A1tiles]) para ver cómo varían los precios con el tiempo.

---
excerpt: Un breve tutorial sobre web scraping usando beautiful soup. Es una traducción de un artículo de dataquest que ya no se encuentra disponible
---
pub_date: 2023-08-15
